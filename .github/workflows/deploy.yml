name: Build, Deploy Docker Image on Server

on:
  push

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_REPO: ${{ secrets.DOCKER_REPO }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS }}

jobs:
  build-and-deploy:
    environment: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Read package.json for container name
        id: read-package
        run: |
          echo ::set-output name=container_name::$(node -e "console.log(require('./package.json').name)")

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "$KNOWN_HOSTS" > ~/.ssh/known_hosts

      - name: Create directory on server
        run: |
          ssh -t $SERVER_USER@$SERVER_HOST "mkdir -p /home/server/starter-kit"

      - name: Fetch repository secrets and save to .env
        run: |
          curl -sSL \
            -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/secrets | \
            jq -r '.secrets[] | "\(.name)=\(.value)"' > .env
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}


      - name: Copy files to server
        run: |
          scp -r ./* $SERVER_USER@$SERVER_HOST:/home/server/starter-kit

      - name: Deploy on Server
        run: |
          ssh -t $SERVER_USER@$SERVER_HOST << 'EOF'
            cd /home/server/starter-kit
          
            

            ls -la          
            sh deploy.sh

          EOF
