name: Build, Publish, and Deploy Docker Image

on:
  push

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_REPO: ${{ secrets.DOCKER_REPO }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS }}

jobs:
  build-and-deploy:
    environment: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Read package.json for container name
        id: read-package
        run: |
          echo ::set-output name=container_name::$(node -e "console.log(require('./package.json').name)")

      - name: Set container name
        run: echo "CONTAINER_NAME=${{ steps.read-package.outputs.container_name }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.Test.DOCKER_USERNAME }}
          password: ${{ secrets.Test.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker buildx build --push --tag $DOCKER_USERNAME/$DOCKER_REPO:$CONTAINER_NAME:latest .

      - name: Log out from Docker Hub
        run: docker logout

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "$KNOWN_HOSTS" > ~/.ssh/known_hosts

      - name: Deploy
        run: |
          ssh $SERVER_USER@$SERVER_HOST << 'EOF'
            IMAGE_NAME=$DOCKER_USERNAME/$DOCKER_REPO:latest
            CONTAINER_NAME=$CONTAINER_NAME

            cd /home/server/

            # Pull the latest image
            docker pull $IMAGE_NAME

            # Stop and remove the old container if it exists
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            # Run the new container
            docker run -d --name $CONTAINER_NAME $IMAGE_NAME
          EOF
